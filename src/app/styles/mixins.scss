@mixin outline($type: text, $within: false, $hasHover: false) {
	@if ($type == text) {
		outline: none;
		position: relative;

		&::after {
			content: "";
			position: absolute;
			bottom: 0;
			width: 100%;
			transition: inherit;

			border-radius: map-get($radius, md);
			border: 0.05rem solid map-get($colors, black1);

			@if $hasHover {
				transform-origin: center;
				transform: scaleX(0);
			}
		}
		@if $hasHover {
			&:hover::after {
				transform: scaleX(1);
			}
			@if $within {
				&:focus-within::after {
					transform: scaleX(1);
				}
			} @else {
				&:focus-visible::after {
					transform: scaleX(1);
				}
			}
		}
	} @else if ($type == rounded) {
		outline-offset: 0.1rem;
		outline: 0.1rem solid transparent;

		@if $within {
			&:focus-within {
				outline: 0.1rem solid map-get($colors, black1);
			}
		} @else {
			&:focus-visible {
				outline: 0.1rem solid map-get($colors, black1);
			}
		}
	} @else if ($type == colorChange) {
		color: map-get($colors, gray2);
		@if $within {
			&:focus-within {
				color: map-get($colors, black1);
			}
		} @else {
			&:focus-visible {
				color: map-get($colors, black1);
			}
		}
	} @else {
		@warn "Обводки типа #{$type} не существует";
	}
}

@mixin flex($dir: row, $hasGap: true) {
	display: flex;
	justify-content: center;
	align-items: center;
	@if $hasGap {
		gap: map-get($gaps, default);
	}
	flex-direction: $dir;
	@content;
}

@mixin glass(
	$background:
		linear-gradient(
			135deg,
			rgba(255, 255, 255, 0.1),
			rgba(255, 255, 255, 0)
		)
) {
	background: $background;
	@content;
}

@mixin textContent {
	text-align: justify;
	overflow-wrap: break-word;
	@content;
}

@mixin icon(
	$fill: map-get($colors, white1),
	$hasHover: false,
	$fillHover: map-get($colors, black1),
	$width: 3rem
) {
	padding: 0;
	width: $width;
	aspect-ratio: 1 / 1;
	border-radius: map-get($radius, lg);

	& svg {
		transition: inherit;
		fill: $fill;
	}

	@if $hasHover {
		&:hover:not(:disabled) {
			& svg {
				fill: $fillHover;
			}
		}
	}
	@content;
}

@mixin logo {
	border-radius: map-get($radius, rounded);
	@content;
}

@mixin grid {
	display: grid;
	justify-content: center;
	align-items: center;
	gap: map-get($gaps, default);
	@content;
}

@mixin transition(
	$duration: map-get($transitions, link),
	$properties: (
		all,
	)
) {
	transition-property: $properties;
	transition-duration: $duration;
}

@mixin desktop {
	@media only screen and (min-width: 769px) {
		@content;
	}
}

@mixin mobile {
	@media only screen and (max-width: 768px) {
		@content;
	}
}

@mixin tablet {
	@media only screen and (max-width: 1080px) {
		@content;
	}
}

@mixin mainContent {
	flex: 1;
	@content;
}

@mixin container($maxWidth: 1400px) {
	margin: 0 auto;
	max-width: $maxWidth;
	padding: map-get($padding, default);
	@content;
}

@mixin scrollbar(
	$width: 10px,
	$thumbBg: map-get($colors, black1),
	$trackBg: map-get($colors, white1)
) {
	scroll-behavior: smooth;
	&::-webkit-scrollbar {
		width: $width;
		border-radius: map-get($radius, sm);
		background: $trackBg;
	}
	&::-webkit-scrollbar-thumb {
		border-radius: map-get($radius, sm);
		background: $thumbBg;
	}
	&::-webkit-scrollbar-button {
		display: none;
	}
}

@mixin semiBold($size: map-get($fontSizes, h4)) {
	font-size: $size;
	font-weight: 600;
	@content;
}

@mixin hidden {
	opacity: 0;
	visibility: hidden;
}

@mixin visible {
	opacity: 1;
	visibility: visible;
}
